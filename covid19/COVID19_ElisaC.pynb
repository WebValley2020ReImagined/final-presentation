{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: scanpy in /home/elisa/.local/lib/python3.7/site-packages (1.6.0)\n",
      "Requirement already satisfied: statsmodels>=0.10.0rc2 in /home/elisa/.local/lib/python3.7/site-packages (from scanpy) (0.12.0rc0)\n",
      "Requirement already satisfied: patsy in /home/elisa/.local/lib/python3.7/site-packages (from scanpy) (0.5.1)\n",
      "Requirement already satisfied: numba>=0.41.0 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (0.50.1)\n",
      "Requirement already satisfied: scikit-learn>=0.21.2 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (0.23.1)\n",
      "Requirement already satisfied: anndata>=0.7 in /home/elisa/.local/lib/python3.7/site-packages (from scanpy) (0.7.4)\n",
      "Requirement already satisfied: scipy>=1.4 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (1.5.0)\n",
      "Requirement already satisfied: joblib in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (0.15.1)\n",
      "Requirement already satisfied: numpy>=1.17.0 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (1.18.5)\n",
      "Requirement already satisfied: matplotlib>=3.1.2 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (3.2.2)\n",
      "Requirement already satisfied: tqdm in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (4.47.0)\n",
      "Requirement already satisfied: h5py>=2.10.0 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (2.10.0)\n",
      "Requirement already satisfied: sinfo in /home/elisa/.local/lib/python3.7/site-packages (from scanpy) (0.3.1)\n",
      "Requirement already satisfied: legacy-api-wrap in /home/elisa/.local/lib/python3.7/site-packages (from scanpy) (1.2)\n",
      "Requirement already satisfied: umap-learn>=0.3.10 in /home/elisa/.local/lib/python3.7/site-packages (from scanpy) (0.4.6)\n",
      "Requirement already satisfied: tables in /home/elisa/.local/lib/python3.7/site-packages (from scanpy) (3.6.1)\n",
      "Requirement already satisfied: networkx>=2.3 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (2.4)\n",
      "Requirement already satisfied: importlib-metadata>=0.7; python_version < \"3.8\" in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (1.7.0)\n",
      "Requirement already satisfied: natsort in /home/elisa/.local/lib/python3.7/site-packages (from scanpy) (7.0.1)\n",
      "Requirement already satisfied: setuptools-scm in /home/elisa/.local/lib/python3.7/site-packages (from scanpy) (4.1.2)\n",
      "Requirement already satisfied: packaging in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (20.4)\n",
      "Requirement already satisfied: pandas>=0.21 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scanpy) (1.0.5)\n",
      "Requirement already satisfied: seaborn in /home/elisa/.local/lib/python3.7/site-packages (from scanpy) (0.10.1)\n",
      "Requirement already satisfied: six in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from patsy->scanpy) (1.15.0)\n",
      "Requirement already satisfied: setuptools in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from numba>=0.41.0->scanpy) (47.3.1.post20200622)\n",
      "Requirement already satisfied: llvmlite<0.34,>=0.33.0.dev0 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from numba>=0.41.0->scanpy) (0.33.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from scikit-learn>=0.21.2->scanpy) (2.1.0)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from matplotlib>=3.1.2->scanpy) (2.4.7)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from matplotlib>=3.1.2->scanpy) (2.8.1)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from matplotlib>=3.1.2->scanpy) (1.2.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from matplotlib>=3.1.2->scanpy) (0.10.0)\n",
      "Requirement already satisfied: stdlib-list in /home/elisa/.local/lib/python3.7/site-packages (from sinfo->scanpy) (0.7.0)\n",
      "Requirement already satisfied: get-version>=2.0.4 in /home/elisa/.local/lib/python3.7/site-packages (from legacy-api-wrap->scanpy) (2.1)\n",
      "Requirement already satisfied: numexpr>=2.6.2 in /home/elisa/.local/lib/python3.7/site-packages (from tables->scanpy) (2.7.1)\n",
      "Requirement already satisfied: decorator>=4.3.0 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from networkx>=2.3->scanpy) (4.4.2)\n",
      "Requirement already satisfied: zipp>=0.5 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from importlib-metadata>=0.7; python_version < \"3.8\"->scanpy) (3.1.0)\n",
      "Requirement already satisfied: pytz>=2017.2 in /anaconda/envs/py37_pytorch/lib/python3.7/site-packages (from pandas>=0.21->scanpy) (2020.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install scanpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n",
      "Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.\n",
      "Collecting package metadata (repodata.json): done\n",
      "Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n",
      "Solving environment: - \n",
      "Found conflicts! Looking for incompatible packages.\n",
      "This can take several minutes.  Press CTRL-C to abort.\n",
      "                                                                               failed\n",
      "\n",
      "UnsatisfiableError: The following specifications were found to be incompatible with each other:\n",
      "\n",
      "Output in format: Requested package -> Available versions\n",
      "\n",
      "\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "conda install -c bioconda scanpy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scanpy as sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from umap import UMAP\n",
    "import umap\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn.preprocessing import normalize\n",
    "from sklearn.cluster import DBSCAN\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "reducer = umap.UMAP(random_state = 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = sc.read('Single_cell_atlas_of_peripheral_immune_response_to_SARS_CoV_2_infection.h5ad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AnnData object with n_obs × n_vars = 44721 × 26361\n",
      "    obs: 'Admission', 'ClusterID', 'DPS', 'DTF', 'Donor_full', 'HLA1', 'IFN1', 'Sex', 'Status', 'Ventilated', 'cell_type_coarse', 'cell_type_fine', 'nCount_RNA', 'nCount_SCT', 'nFeature_RNA', 'nFeature_SCT', 'percent_mt', 'percent_rpl', 'percent_rps', 'percent_rrna', 'seurat_clusters', 'singler'\n",
      "    var: 'Selected', 'sct_detection_rate', 'sct_gmean', 'sct_residual_mean', 'sct_residual_variance', 'sct_variable', 'sct_variance'\n",
      "    uns: 'assay', 'authors', 'disease', 'organism', 'preprint', 'short_name', 'tissue'\n",
      "    obsm: 'X_pca', 'X_umap'\n",
      "    varm: 'pca_feature_loadings'\n",
      "    layers: 'matrix', 'norm_data', 'scale_data'\n"
     ]
    }
   ],
   "source": [
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[0;31mType:\u001b[0m        module\n",
       "\u001b[0;31mString form:\u001b[0m <module 'scanpy' from '/home/elisa/.local/lib/python3.7/site-packages/scanpy/__init__.py'>\n",
       "\u001b[0;31mFile:\u001b[0m        ~/.local/lib/python3.7/site-packages/scanpy/__init__.py\n",
       "\u001b[0;31mDocstring:\u001b[0m   <no docstring>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "?sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.cluster import MeanShift, estimate_bandwidth\n",
    "from sklearn.datasets import make_blobs\n",
    "from sklearn import datasets\n",
    "import matplotlib.pyplot as plt\n",
    "from itertools import cycle\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(44721, 26361)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(44721, 26361)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 44721 × 26361\n",
       "    obs: 'Admission', 'ClusterID', 'DPS', 'DTF', 'Donor_full', 'HLA1', 'IFN1', 'Sex', 'Status', 'Ventilated', 'cell_type_coarse', 'cell_type_fine', 'nCount_RNA', 'nCount_SCT', 'nFeature_RNA', 'nFeature_SCT', 'percent_mt', 'percent_rpl', 'percent_rps', 'percent_rrna', 'seurat_clusters', 'singler'\n",
       "    var: 'Selected', 'sct_detection_rate', 'sct_gmean', 'sct_residual_mean', 'sct_residual_variance', 'sct_variable', 'sct_variance'\n",
       "    uns: 'assay', 'authors', 'disease', 'organism', 'preprint', 'short_name', 'tissue'\n",
       "    obsm: 'X_pca', 'X_umap'\n",
       "    varm: 'pca_feature_loadings'\n",
       "    layers: 'matrix', 'norm_data', 'scale_data'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "covidX   = data.X    #actual gene expression data\n",
    "covidobs = data.obs  #data about the patients\n",
    "covidvar = data.var  #data about the distribution of each gene\n",
    "coviduns = data.uns  #metadata of the object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covidX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Admission</th>\n",
       "      <th>ClusterID</th>\n",
       "      <th>DPS</th>\n",
       "      <th>DTF</th>\n",
       "      <th>Donor_full</th>\n",
       "      <th>HLA1</th>\n",
       "      <th>IFN1</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Status</th>\n",
       "      <th>Ventilated</th>\n",
       "      <th>...</th>\n",
       "      <th>nCount_RNA</th>\n",
       "      <th>nCount_SCT</th>\n",
       "      <th>nFeature_RNA</th>\n",
       "      <th>nFeature_SCT</th>\n",
       "      <th>percent_mt</th>\n",
       "      <th>percent_rpl</th>\n",
       "      <th>percent_rps</th>\n",
       "      <th>percent_rrna</th>\n",
       "      <th>seurat_clusters</th>\n",
       "      <th>singler</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>covid_555_1.1</th>\n",
       "      <td>ICU</td>\n",
       "      <td>13</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>C1 A</td>\n",
       "      <td>-0.026053</td>\n",
       "      <td>0.015625</td>\n",
       "      <td>M</td>\n",
       "      <td>COVID</td>\n",
       "      <td>NonVent</td>\n",
       "      <td>...</td>\n",
       "      <td>1222.0</td>\n",
       "      <td>1682.0</td>\n",
       "      <td>125</td>\n",
       "      <td>126</td>\n",
       "      <td>1.309329</td>\n",
       "      <td>0.245499</td>\n",
       "      <td>0.081833</td>\n",
       "      <td>46.644844</td>\n",
       "      <td>12</td>\n",
       "      <td>Erythroblast</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.2</th>\n",
       "      <td>ICU</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>C1 A</td>\n",
       "      <td>0.023525</td>\n",
       "      <td>-0.000322</td>\n",
       "      <td>M</td>\n",
       "      <td>COVID</td>\n",
       "      <td>NonVent</td>\n",
       "      <td>...</td>\n",
       "      <td>1099.0</td>\n",
       "      <td>1700.0</td>\n",
       "      <td>160</td>\n",
       "      <td>160</td>\n",
       "      <td>13.102820</td>\n",
       "      <td>0.363967</td>\n",
       "      <td>0.363967</td>\n",
       "      <td>58.780708</td>\n",
       "      <td>9</td>\n",
       "      <td>B_cell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.3</th>\n",
       "      <td>ICU</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>C1 A</td>\n",
       "      <td>-0.044271</td>\n",
       "      <td>0.086385</td>\n",
       "      <td>M</td>\n",
       "      <td>COVID</td>\n",
       "      <td>NonVent</td>\n",
       "      <td>...</td>\n",
       "      <td>1055.0</td>\n",
       "      <td>1661.0</td>\n",
       "      <td>212</td>\n",
       "      <td>213</td>\n",
       "      <td>2.938389</td>\n",
       "      <td>0.947867</td>\n",
       "      <td>0.663507</td>\n",
       "      <td>55.829384</td>\n",
       "      <td>18</td>\n",
       "      <td>B_cell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.7</th>\n",
       "      <td>ICU</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>C1 A</td>\n",
       "      <td>-0.038040</td>\n",
       "      <td>0.022590</td>\n",
       "      <td>M</td>\n",
       "      <td>COVID</td>\n",
       "      <td>NonVent</td>\n",
       "      <td>...</td>\n",
       "      <td>2411.0</td>\n",
       "      <td>1971.0</td>\n",
       "      <td>312</td>\n",
       "      <td>312</td>\n",
       "      <td>10.908337</td>\n",
       "      <td>0.165906</td>\n",
       "      <td>0.041477</td>\n",
       "      <td>67.399422</td>\n",
       "      <td>9</td>\n",
       "      <td>B_cell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.8</th>\n",
       "      <td>ICU</td>\n",
       "      <td>22</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>C1 A</td>\n",
       "      <td>-0.043605</td>\n",
       "      <td>0.010739</td>\n",
       "      <td>M</td>\n",
       "      <td>COVID</td>\n",
       "      <td>NonVent</td>\n",
       "      <td>...</td>\n",
       "      <td>2276.0</td>\n",
       "      <td>1948.0</td>\n",
       "      <td>336</td>\n",
       "      <td>336</td>\n",
       "      <td>11.203866</td>\n",
       "      <td>0.307557</td>\n",
       "      <td>0.263620</td>\n",
       "      <td>67.355011</td>\n",
       "      <td>21</td>\n",
       "      <td>B_cell</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Admission ClusterID  DPS  DTF Donor_full      HLA1      IFN1  \\\n",
       "covid_555_1.1       ICU        13    9    9       C1 A -0.026053  0.015625   \n",
       "covid_555_1.2       ICU        10    9    9       C1 A  0.023525 -0.000322   \n",
       "covid_555_1.3       ICU        19    9    9       C1 A -0.044271  0.086385   \n",
       "covid_555_1.7       ICU        10    9    9       C1 A -0.038040  0.022590   \n",
       "covid_555_1.8       ICU        22    9    9       C1 A -0.043605  0.010739   \n",
       "\n",
       "              Sex Status Ventilated  ... nCount_RNA nCount_SCT  nFeature_RNA  \\\n",
       "covid_555_1.1   M  COVID    NonVent  ...     1222.0     1682.0           125   \n",
       "covid_555_1.2   M  COVID    NonVent  ...     1099.0     1700.0           160   \n",
       "covid_555_1.3   M  COVID    NonVent  ...     1055.0     1661.0           212   \n",
       "covid_555_1.7   M  COVID    NonVent  ...     2411.0     1971.0           312   \n",
       "covid_555_1.8   M  COVID    NonVent  ...     2276.0     1948.0           336   \n",
       "\n",
       "               nFeature_SCT  percent_mt  percent_rpl  percent_rps  \\\n",
       "covid_555_1.1           126    1.309329     0.245499     0.081833   \n",
       "covid_555_1.2           160   13.102820     0.363967     0.363967   \n",
       "covid_555_1.3           213    2.938389     0.947867     0.663507   \n",
       "covid_555_1.7           312   10.908337     0.165906     0.041477   \n",
       "covid_555_1.8           336   11.203866     0.307557     0.263620   \n",
       "\n",
       "               percent_rrna  seurat_clusters       singler  \n",
       "covid_555_1.1     46.644844               12  Erythroblast  \n",
       "covid_555_1.2     58.780708                9        B_cell  \n",
       "covid_555_1.3     55.829384               18        B_cell  \n",
       "covid_555_1.7     67.399422                9        B_cell  \n",
       "covid_555_1.8     67.355011               21        B_cell  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covidobs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OverloadedDict, wrapping:\n",
       "\t{'assay': 'Seq-Well', 'authors': array([\"{'name': 'Aaron J Wilk'}\", \"{'name': 'Arjun Rustagi'}\",\n",
       "       \"{'name': 'Nancy Q Zhao'}\", \"{'name': 'Jonasel Roque'}\",\n",
       "       \"{'name': 'Giovanny J Martinez-Colon'}\",\n",
       "       \"{'name': 'Julia L McKechnie'}\", \"{'name': 'Geoffrey T Ivison'}\",\n",
       "       \"{'name': 'Thanmayi Ranganath'}\", \"{'name': 'Rosemary Vergara'}\",\n",
       "       \"{'name': 'Taylor Hollis'}\", \"{'name': 'Laura J Simpson'}\",\n",
       "       \"{'name': 'Philip Grant'}\", \"{'name': 'Aruna Subramanian'}\",\n",
       "       \"{'name': 'Angela J Rogers', 'email': 'ajrogers@stanford.edu'}\",\n",
       "       \"{'name': 'Catherine A Blish', 'email': 'cblish@stanford.edu'}\"],\n",
       "      dtype=object), 'disease': array(['COVID-19', ''], dtype=object), 'organism': 'Homo sapiens', 'preprint': {'date': '2020-04-23', 'doi': 'https://doi.org/10.1101/2020.04.17.20069930', 'title': 'A single-cell atlas of the peripheral immune response to severe COVID-19'}, 'short_name': 'Single_cell_atlas_of_peripheral_immune_response_to_SARS_CoV_2_infection', 'tissue': array(['blood'], dtype=object)}\n",
       "With overloaded keys:\n",
       "\t['neighbors']."
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.uns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Admission</th>\n",
       "      <th>ClusterID</th>\n",
       "      <th>DPS</th>\n",
       "      <th>DTF</th>\n",
       "      <th>Donor_full</th>\n",
       "      <th>HLA1</th>\n",
       "      <th>IFN1</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Status</th>\n",
       "      <th>Ventilated</th>\n",
       "      <th>...</th>\n",
       "      <th>nCount_RNA</th>\n",
       "      <th>nCount_SCT</th>\n",
       "      <th>nFeature_RNA</th>\n",
       "      <th>nFeature_SCT</th>\n",
       "      <th>percent_mt</th>\n",
       "      <th>percent_rpl</th>\n",
       "      <th>percent_rps</th>\n",
       "      <th>percent_rrna</th>\n",
       "      <th>seurat_clusters</th>\n",
       "      <th>singler</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>covid_555_1.1</th>\n",
       "      <td>ICU</td>\n",
       "      <td>13</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>C1 A</td>\n",
       "      <td>-0.026053</td>\n",
       "      <td>0.015625</td>\n",
       "      <td>M</td>\n",
       "      <td>COVID</td>\n",
       "      <td>NonVent</td>\n",
       "      <td>...</td>\n",
       "      <td>1222.0</td>\n",
       "      <td>1682.0</td>\n",
       "      <td>125</td>\n",
       "      <td>126</td>\n",
       "      <td>1.309329</td>\n",
       "      <td>0.245499</td>\n",
       "      <td>0.081833</td>\n",
       "      <td>46.644844</td>\n",
       "      <td>12</td>\n",
       "      <td>Erythroblast</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.2</th>\n",
       "      <td>ICU</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>C1 A</td>\n",
       "      <td>0.023525</td>\n",
       "      <td>-0.000322</td>\n",
       "      <td>M</td>\n",
       "      <td>COVID</td>\n",
       "      <td>NonVent</td>\n",
       "      <td>...</td>\n",
       "      <td>1099.0</td>\n",
       "      <td>1700.0</td>\n",
       "      <td>160</td>\n",
       "      <td>160</td>\n",
       "      <td>13.102820</td>\n",
       "      <td>0.363967</td>\n",
       "      <td>0.363967</td>\n",
       "      <td>58.780708</td>\n",
       "      <td>9</td>\n",
       "      <td>B_cell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.3</th>\n",
       "      <td>ICU</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>C1 A</td>\n",
       "      <td>-0.044271</td>\n",
       "      <td>0.086385</td>\n",
       "      <td>M</td>\n",
       "      <td>COVID</td>\n",
       "      <td>NonVent</td>\n",
       "      <td>...</td>\n",
       "      <td>1055.0</td>\n",
       "      <td>1661.0</td>\n",
       "      <td>212</td>\n",
       "      <td>213</td>\n",
       "      <td>2.938389</td>\n",
       "      <td>0.947867</td>\n",
       "      <td>0.663507</td>\n",
       "      <td>55.829384</td>\n",
       "      <td>18</td>\n",
       "      <td>B_cell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.7</th>\n",
       "      <td>ICU</td>\n",
       "      <td>10</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>C1 A</td>\n",
       "      <td>-0.038040</td>\n",
       "      <td>0.022590</td>\n",
       "      <td>M</td>\n",
       "      <td>COVID</td>\n",
       "      <td>NonVent</td>\n",
       "      <td>...</td>\n",
       "      <td>2411.0</td>\n",
       "      <td>1971.0</td>\n",
       "      <td>312</td>\n",
       "      <td>312</td>\n",
       "      <td>10.908337</td>\n",
       "      <td>0.165906</td>\n",
       "      <td>0.041477</td>\n",
       "      <td>67.399422</td>\n",
       "      <td>9</td>\n",
       "      <td>B_cell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.8</th>\n",
       "      <td>ICU</td>\n",
       "      <td>22</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>C1 A</td>\n",
       "      <td>-0.043605</td>\n",
       "      <td>0.010739</td>\n",
       "      <td>M</td>\n",
       "      <td>COVID</td>\n",
       "      <td>NonVent</td>\n",
       "      <td>...</td>\n",
       "      <td>2276.0</td>\n",
       "      <td>1948.0</td>\n",
       "      <td>336</td>\n",
       "      <td>336</td>\n",
       "      <td>11.203866</td>\n",
       "      <td>0.307557</td>\n",
       "      <td>0.263620</td>\n",
       "      <td>67.355011</td>\n",
       "      <td>21</td>\n",
       "      <td>B_cell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HIP045.2543</th>\n",
       "      <td>N/A</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>H6</td>\n",
       "      <td>0.588374</td>\n",
       "      <td>0.092001</td>\n",
       "      <td>M</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>...</td>\n",
       "      <td>6103.0</td>\n",
       "      <td>1959.0</td>\n",
       "      <td>2460</td>\n",
       "      <td>1080</td>\n",
       "      <td>6.898247</td>\n",
       "      <td>3.637555</td>\n",
       "      <td>2.867442</td>\n",
       "      <td>10.797968</td>\n",
       "      <td>6</td>\n",
       "      <td>Monocyte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HIP045.2544</th>\n",
       "      <td>N/A</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>H6</td>\n",
       "      <td>1.295145</td>\n",
       "      <td>0.045697</td>\n",
       "      <td>M</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>...</td>\n",
       "      <td>7324.0</td>\n",
       "      <td>2088.0</td>\n",
       "      <td>2488</td>\n",
       "      <td>1031</td>\n",
       "      <td>6.485527</td>\n",
       "      <td>6.157837</td>\n",
       "      <td>4.929000</td>\n",
       "      <td>12.738940</td>\n",
       "      <td>20</td>\n",
       "      <td>Monocyte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HIP045.2545</th>\n",
       "      <td>N/A</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>H6</td>\n",
       "      <td>0.892457</td>\n",
       "      <td>0.062819</td>\n",
       "      <td>M</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>...</td>\n",
       "      <td>6368.0</td>\n",
       "      <td>1929.0</td>\n",
       "      <td>2511</td>\n",
       "      <td>1021</td>\n",
       "      <td>4.742462</td>\n",
       "      <td>6.171483</td>\n",
       "      <td>4.978015</td>\n",
       "      <td>14.400126</td>\n",
       "      <td>20</td>\n",
       "      <td>T_cells</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HIP045.2546</th>\n",
       "      <td>N/A</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>H6</td>\n",
       "      <td>0.020954</td>\n",
       "      <td>0.036953</td>\n",
       "      <td>M</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>...</td>\n",
       "      <td>6669.0</td>\n",
       "      <td>1918.0</td>\n",
       "      <td>2650</td>\n",
       "      <td>1063</td>\n",
       "      <td>4.573400</td>\n",
       "      <td>3.328835</td>\n",
       "      <td>2.998950</td>\n",
       "      <td>14.574899</td>\n",
       "      <td>10</td>\n",
       "      <td>Monocyte</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HIP045.2547</th>\n",
       "      <td>N/A</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>H6</td>\n",
       "      <td>-0.135973</td>\n",
       "      <td>0.024061</td>\n",
       "      <td>M</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>Healthy</td>\n",
       "      <td>...</td>\n",
       "      <td>8990.0</td>\n",
       "      <td>2283.0</td>\n",
       "      <td>2734</td>\n",
       "      <td>1013</td>\n",
       "      <td>3.459399</td>\n",
       "      <td>4.226919</td>\n",
       "      <td>3.359288</td>\n",
       "      <td>13.348165</td>\n",
       "      <td>23</td>\n",
       "      <td>T_cells</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>44721 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Admission ClusterID  DPS  DTF Donor_full      HLA1      IFN1  \\\n",
       "covid_555_1.1       ICU        13    9    9       C1 A -0.026053  0.015625   \n",
       "covid_555_1.2       ICU        10    9    9       C1 A  0.023525 -0.000322   \n",
       "covid_555_1.3       ICU        19    9    9       C1 A -0.044271  0.086385   \n",
       "covid_555_1.7       ICU        10    9    9       C1 A -0.038040  0.022590   \n",
       "covid_555_1.8       ICU        22    9    9       C1 A -0.043605  0.010739   \n",
       "...                 ...       ...  ...  ...        ...       ...       ...   \n",
       "HIP045.2543         N/A         7    0    0         H6  0.588374  0.092001   \n",
       "HIP045.2544         N/A        21    0    0         H6  1.295145  0.045697   \n",
       "HIP045.2545         N/A        21    0    0         H6  0.892457  0.062819   \n",
       "HIP045.2546         N/A        11    0    0         H6  0.020954  0.036953   \n",
       "HIP045.2547         N/A        24    0    0         H6 -0.135973  0.024061   \n",
       "\n",
       "              Sex   Status Ventilated  ... nCount_RNA nCount_SCT  \\\n",
       "covid_555_1.1   M    COVID    NonVent  ...     1222.0     1682.0   \n",
       "covid_555_1.2   M    COVID    NonVent  ...     1099.0     1700.0   \n",
       "covid_555_1.3   M    COVID    NonVent  ...     1055.0     1661.0   \n",
       "covid_555_1.7   M    COVID    NonVent  ...     2411.0     1971.0   \n",
       "covid_555_1.8   M    COVID    NonVent  ...     2276.0     1948.0   \n",
       "...            ..      ...        ...  ...        ...        ...   \n",
       "HIP045.2543     M  Healthy    Healthy  ...     6103.0     1959.0   \n",
       "HIP045.2544     M  Healthy    Healthy  ...     7324.0     2088.0   \n",
       "HIP045.2545     M  Healthy    Healthy  ...     6368.0     1929.0   \n",
       "HIP045.2546     M  Healthy    Healthy  ...     6669.0     1918.0   \n",
       "HIP045.2547     M  Healthy    Healthy  ...     8990.0     2283.0   \n",
       "\n",
       "               nFeature_RNA  nFeature_SCT  percent_mt  percent_rpl  \\\n",
       "covid_555_1.1           125           126    1.309329     0.245499   \n",
       "covid_555_1.2           160           160   13.102820     0.363967   \n",
       "covid_555_1.3           212           213    2.938389     0.947867   \n",
       "covid_555_1.7           312           312   10.908337     0.165906   \n",
       "covid_555_1.8           336           336   11.203866     0.307557   \n",
       "...                     ...           ...         ...          ...   \n",
       "HIP045.2543            2460          1080    6.898247     3.637555   \n",
       "HIP045.2544            2488          1031    6.485527     6.157837   \n",
       "HIP045.2545            2511          1021    4.742462     6.171483   \n",
       "HIP045.2546            2650          1063    4.573400     3.328835   \n",
       "HIP045.2547            2734          1013    3.459399     4.226919   \n",
       "\n",
       "               percent_rps  percent_rrna  seurat_clusters       singler  \n",
       "covid_555_1.1     0.081833     46.644844               12  Erythroblast  \n",
       "covid_555_1.2     0.363967     58.780708                9        B_cell  \n",
       "covid_555_1.3     0.663507     55.829384               18        B_cell  \n",
       "covid_555_1.7     0.041477     67.399422                9        B_cell  \n",
       "covid_555_1.8     0.263620     67.355011               21        B_cell  \n",
       "...                    ...           ...              ...           ...  \n",
       "HIP045.2543       2.867442     10.797968                6      Monocyte  \n",
       "HIP045.2544       4.929000     12.738940               20      Monocyte  \n",
       "HIP045.2545       4.978015     14.400126               20       T_cells  \n",
       "HIP045.2546       2.998950     14.574899               10      Monocyte  \n",
       "HIP045.2547       3.359288     13.348165               23       T_cells  \n",
       "\n",
       "[44721 rows x 22 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.obs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Selected</th>\n",
       "      <th>sct_detection_rate</th>\n",
       "      <th>sct_gmean</th>\n",
       "      <th>sct_residual_mean</th>\n",
       "      <th>sct_residual_variance</th>\n",
       "      <th>sct_variable</th>\n",
       "      <th>sct_variance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5S-rRNA</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000261</td>\n",
       "      <td>0.000189</td>\n",
       "      <td>0.000651</td>\n",
       "      <td>1.164300</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7SK</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.027394</td>\n",
       "      <td>0.020371</td>\n",
       "      <td>0.005464</td>\n",
       "      <td>1.062872</td>\n",
       "      <td>0</td>\n",
       "      <td>0.035997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A1BG</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001785</td>\n",
       "      <td>0.001268</td>\n",
       "      <td>0.002331</td>\n",
       "      <td>1.063613</td>\n",
       "      <td>0</td>\n",
       "      <td>0.002062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A1BG-AS1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000501</td>\n",
       "      <td>0.000356</td>\n",
       "      <td>0.001971</td>\n",
       "      <td>1.150165</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>A1CF</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001324</td>\n",
       "      <td>0.000942</td>\n",
       "      <td>0.002839</td>\n",
       "      <td>1.158183</td>\n",
       "      <td>0</td>\n",
       "      <td>0.001502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UGT2B17</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001163</td>\n",
       "      <td>0.000859</td>\n",
       "      <td>-0.001669</td>\n",
       "      <td>0.938646</td>\n",
       "      <td>0</td>\n",
       "      <td>0.001663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vault</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000201</td>\n",
       "      <td>0.000139</td>\n",
       "      <td>-0.002708</td>\n",
       "      <td>0.750773</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XX-CR54.1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000221</td>\n",
       "      <td>0.000153</td>\n",
       "      <td>-0.002593</td>\n",
       "      <td>0.731583</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XXbac-B135H6.18</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000983</td>\n",
       "      <td>0.000706</td>\n",
       "      <td>0.000535</td>\n",
       "      <td>1.047113</td>\n",
       "      <td>0</td>\n",
       "      <td>0.001162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZBTB40-IT1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000221</td>\n",
       "      <td>0.000153</td>\n",
       "      <td>-0.001845</td>\n",
       "      <td>0.819593</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000221</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>26361 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Selected  sct_detection_rate  sct_gmean  sct_residual_mean  \\\n",
       "5S-rRNA               0.0            0.000261   0.000189           0.000651   \n",
       "7SK                   0.0            0.027394   0.020371           0.005464   \n",
       "A1BG                  0.0            0.001785   0.001268           0.002331   \n",
       "A1BG-AS1              0.0            0.000501   0.000356           0.001971   \n",
       "A1CF                  0.0            0.001324   0.000942           0.002839   \n",
       "...                   ...                 ...        ...                ...   \n",
       "UGT2B17               0.0            0.001163   0.000859          -0.001669   \n",
       "Vault                 0.0            0.000201   0.000139          -0.002708   \n",
       "XX-CR54.1             0.0            0.000221   0.000153          -0.002593   \n",
       "XXbac-B135H6.18       0.0            0.000983   0.000706           0.000535   \n",
       "ZBTB40-IT1            0.0            0.000221   0.000153          -0.001845   \n",
       "\n",
       "                 sct_residual_variance  sct_variable  sct_variance  \n",
       "5S-rRNA                       1.164300             0      0.000321  \n",
       "7SK                           1.062872             0      0.035997  \n",
       "A1BG                          1.063613             0      0.002062  \n",
       "A1BG-AS1                      1.150165             0      0.000561  \n",
       "A1CF                          1.158183             0      0.001502  \n",
       "...                                ...           ...           ...  \n",
       "UGT2B17                       0.938646             0      0.001663  \n",
       "Vault                         0.750773             0      0.000201  \n",
       "XX-CR54.1                     0.731583             0      0.000221  \n",
       "XXbac-B135H6.18               1.047113             0      0.001162  \n",
       "ZBTB40-IT1                    0.819593             0      0.000221  \n",
       "\n",
       "[26361 rows x 7 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>5S-rRNA</th>\n",
       "      <th>7SK</th>\n",
       "      <th>A1BG</th>\n",
       "      <th>A1BG-AS1</th>\n",
       "      <th>A1CF</th>\n",
       "      <th>A2M</th>\n",
       "      <th>A2M-AS1</th>\n",
       "      <th>A2ML1</th>\n",
       "      <th>A4GALT</th>\n",
       "      <th>A4GNT</th>\n",
       "      <th>...</th>\n",
       "      <th>TRBJ2-6</th>\n",
       "      <th>TRBV10-1</th>\n",
       "      <th>TRBV6-4</th>\n",
       "      <th>TRBV6-8</th>\n",
       "      <th>TTLL13</th>\n",
       "      <th>UGT2B17</th>\n",
       "      <th>Vault</th>\n",
       "      <th>XX-CR54.1</th>\n",
       "      <th>XXbac-B135H6.18</th>\n",
       "      <th>ZBTB40-IT1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>covid_555_1.333</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.334</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.335</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.336</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.337</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.639</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.640</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.641</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.643</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>covid_555_1.644</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>300 rows × 26361 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 5S-rRNA  7SK  A1BG  A1BG-AS1  A1CF  A2M  A2M-AS1  A2ML1  \\\n",
       "covid_555_1.333      0.0  0.0   0.0       0.0   0.0  0.0      0.0    0.0   \n",
       "covid_555_1.334      0.0  0.0   0.0       0.0   0.0  0.0      0.0    0.0   \n",
       "covid_555_1.335      0.0  0.0   0.0       0.0   0.0  0.0      0.0    0.0   \n",
       "covid_555_1.336      0.0  0.0   0.0       0.0   0.0  0.0      0.0    0.0   \n",
       "covid_555_1.337      0.0  0.0   0.0       0.0   0.0  0.0      0.0    0.0   \n",
       "...                  ...  ...   ...       ...   ...  ...      ...    ...   \n",
       "covid_555_1.639      0.0  0.0   0.0       0.0   0.0  0.0      0.0    0.0   \n",
       "covid_555_1.640      0.0  0.0   0.0       0.0   0.0  0.0      0.0    0.0   \n",
       "covid_555_1.641      0.0  0.0   0.0       0.0   0.0  0.0      0.0    0.0   \n",
       "covid_555_1.643      0.0  0.0   0.0       0.0   0.0  0.0      0.0    0.0   \n",
       "covid_555_1.644      0.0  0.0   0.0       0.0   0.0  0.0      0.0    0.0   \n",
       "\n",
       "                 A4GALT  A4GNT  ...  TRBJ2-6  TRBV10-1  TRBV6-4  TRBV6-8  \\\n",
       "covid_555_1.333     0.0    0.0  ...      0.0       0.0      0.0      0.0   \n",
       "covid_555_1.334     0.0    0.0  ...      0.0       0.0      0.0      0.0   \n",
       "covid_555_1.335     0.0    0.0  ...      0.0       0.0      0.0      0.0   \n",
       "covid_555_1.336     0.0    0.0  ...      0.0       0.0      0.0      0.0   \n",
       "covid_555_1.337     0.0    0.0  ...      0.0       0.0      0.0      0.0   \n",
       "...                 ...    ...  ...      ...       ...      ...      ...   \n",
       "covid_555_1.639     0.0    0.0  ...      0.0       0.0      0.0      0.0   \n",
       "covid_555_1.640     0.0    0.0  ...      0.0       0.0      0.0      0.0   \n",
       "covid_555_1.641     0.0    0.0  ...      0.0       0.0      0.0      0.0   \n",
       "covid_555_1.643     0.0    0.0  ...      0.0       0.0      0.0      0.0   \n",
       "covid_555_1.644     0.0    0.0  ...      0.0       0.0      0.0      0.0   \n",
       "\n",
       "                 TTLL13  UGT2B17  Vault  XX-CR54.1  XXbac-B135H6.18  \\\n",
       "covid_555_1.333     0.0      0.0    0.0        0.0              0.0   \n",
       "covid_555_1.334     0.0      0.0    0.0        0.0              0.0   \n",
       "covid_555_1.335     0.0      0.0    0.0        0.0              0.0   \n",
       "covid_555_1.336     0.0      0.0    0.0        0.0              0.0   \n",
       "covid_555_1.337     0.0      0.0    0.0        0.0              0.0   \n",
       "...                 ...      ...    ...        ...              ...   \n",
       "covid_555_1.639     0.0      0.0    0.0        0.0              0.0   \n",
       "covid_555_1.640     0.0      0.0    0.0        0.0              0.0   \n",
       "covid_555_1.641     0.0      0.0    0.0        0.0              0.0   \n",
       "covid_555_1.643     0.0      0.0    0.0        0.0              0.0   \n",
       "covid_555_1.644     0.0      0.0    0.0        0.0              0.0   \n",
       "\n",
       "                 ZBTB40-IT1  \n",
       "covid_555_1.333         0.0  \n",
       "covid_555_1.334         0.0  \n",
       "covid_555_1.335         0.0  \n",
       "covid_555_1.336         0.0  \n",
       "covid_555_1.337         0.0  \n",
       "...                     ...  \n",
       "covid_555_1.639         0.0  \n",
       "covid_555_1.640         0.0  \n",
       "covid_555_1.641         0.0  \n",
       "covid_555_1.643         0.0  \n",
       "covid_555_1.644         0.0  \n",
       "\n",
       "[300 rows x 26361 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "patients = covidobs.index\n",
    "genes = covidvar.index\n",
    "exp_df = pd.DataFrame(data = covidX, columns = genes, index = patients)\n",
    "exp_df[300:600]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., ..., 0., 0., 0.], dtype=float32)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covidX[4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating a data frame with the 'covid genes'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "covidX_covid = covidX[covidobs.Status == \"COVID\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covidX_covid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda/envs/py37_pytorch/lib/python3.7/site-packages/numba/np/ufunc/parallel.py:355: NumbaWarning: The TBB threading layer requires TBB version 2019.5 or later i.e., TBB_INTERFACE_VERSION >= 11005. Found TBB_INTERFACE_VERSION = 10001. The TBB threading layer is disabled.\n",
      "  warnings.warn(problem)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 34min 10s, sys: 28.3 s, total: 34min 39s\n",
      "Wall time: 6min 39s\n"
     ]
    }
   ],
   "source": [
    "fit = umap.UMAP()\n",
    "%time u = fit.fit_transform(covidX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.59366375,  4.6282096 ],\n",
       "       [ 4.2914133 ,  5.031896  ],\n",
       "       [ 2.539007  ,  6.1662374 ],\n",
       "       ...,\n",
       "       [ 5.2779617 ,  9.650622  ],\n",
       "       [ 1.9384923 , 10.861949  ],\n",
       "       [ 4.3285937 ,  7.1934657 ]], dtype=float32)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(u[:,0], u[:,1],alpha=0.5)\n",
    "plt.title('UMAP clustering for all the genes');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating the UMAP algorithm and clustering for covid genes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 17min 16s, sys: 13.5 s, total: 17min 29s\n",
      "Wall time: 3min 28s\n"
     ]
    }
   ],
   "source": [
    "fit_covid = umap.UMAP()\n",
    "%time u_c = fit_covid.fit_transform(covidX_covid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(u_c[:,0], u_c[:,1],alpha=0.5)\n",
    "plt.title('UMAP algorithm and clustering for covid  genes');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating the UMAP algorithm and clustering for healthy genes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "covidX_healthy = covidX[covidobs.Status == \"Healthy\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 12min 3s, sys: 8.59 s, total: 12min 11s\n",
      "Wall time: 2min 1s\n"
     ]
    }
   ],
   "source": [
    "fit_healthy = umap.UMAP()\n",
    "%time u_h = fit_healthy.fit_transform(covidX_healthy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(u_h[:,0], u_h[:,1],alpha=0.5)\n",
    "plt.title('UMAP algorithm and clustering for heal');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
